# Практические задания по главам книги "Python Crash Course" (3-е издание)

"""
Глава 2: Переменные и простые типы данных
"""
# Задание 2.1: Создайте переменную с вашим любимым высказыванием и выведите его
# Задание 2.2: Поработайте со строками: создайте строку, преобразуйте её в верхний регистр, нижний регистр и капитализацию
# Задание 2.3: Создайте числовые переменные и выполните основные математические операции
# Задание 2.4: Создайте f-строку, включающую различные типы данных

ask = '123'
print(int(ask))
ask = int(ask)
a = ask - 12
print(a)
"""
Глава 3: Списки
"""
# Задание 3.1: Создайте список городов и выполните с ним следующие действия:
#   - Добавьте новый город
#   - Вставьте город в середину списка
#   - Удалите город из списка
#   - Отсортируйте список
# Задание 3.2: Создайте список гостей на ужин и отправьте каждому приглашение
# Задание 3.3: Используйте метод pop() для удаления элементов из списка
city = ['Tashkent', 'Moscow', 'Rio', 'Samarkand','Omsk']
city.append('New York')
city.insert(2, 'Boston')
city.remove('Rio')
city.sort()
print(city)
for i in city:
    print(f'{i}, hi!')
city.pop()
print(city)
"""
Глава 4: Работа со списками
"""
# Задание 4.1: Создайте список чисел от 1 до 1000000 и найдите:
#   - Минимальное значение
#   - Максимальное значение
#   - Сумму всех чисел
# Задание 4.2: Создайте срезы списка и скопируйте список
# Задание 4.3: Создайте кортеж с 5 базовыми продуктами и попробуйте изменить его
nums = list(range(1,1_000_001))
print(min(nums))
print(max(nums))
print(sum(nums))
print(nums[0:100])


"""
Глава 5: Условные выражения
"""
# Задание 5.1: Напишите серию условных тестов с использованием and и or
# Задание 5.2: Создайте программу проверки возраста для различных жизненных этапов
# Задание 5.3: Реализуйте проверку наличия элементов в списке

"""
Глава 6: Словари
"""
# Задание 6.1: Создайте словарь с информацией о человеке
# Задание 6.2: Создайте словарь с любимыми числами нескольких людей
# Задание 6.3: Создайте вложенный словарь с информацией о городах

karl = {'name' : 'Karl',
        }

"""
Глава 7: Ввод данных и циклы while
"""
# Задание 7.1: Напишите программу заказа пиццы с использованием цикла while
# Задание 7.2: Создайте программу продажи билетов в кино с учётом возраста
# Задание 7.3: Реализуйте бесконечный цикл с флагом для выхода

pizza = []
while True:
    nach = input('Какую начинку вы хотите добавить ? \n')
    if nach != 'end':
        pizza.append(nach)
        print(pizza)
    elif nach == 'end':
        print('END')
        break







"""
Глава 8: Функции
"""
# Задание 8.1: Напишите функцию, которая принимает список имён и приветствует каждого
# Задание 8.2: Создайте функцию для описания книги с параметрами по умолчанию
# Задание 8.3: Напишите функцию, которая принимает произвольное количество аргументов

def name(*a):
    print(f'{a}, hello !')

name('bob','asd')


"""
Глава 9: Классы
"""
# Задание 9.1: Создайте класс Restaurant с атрибутами и методами
# Задание 9.2: Создайте класс User с методами для приветствия и увеличения login_attempts
# Задание 9.3: Создайте класс Car с подклассом ElectricCar

# Для выполнения заданий создавайте отдельные файлы с решениями
# Каждое задание должно включать в себя тестирование написанного кода

class Car():
    def __init__(self, brand, year, model):
        self.brand = brand
        self.year = year
        self.model = model

    def check(self):
        print(f'{self.brand}\n'
              f'{self.year}\n'
              f'{self.model}')

class Battary():
    def __init__(self, battary = 100):
        self.battary = battary

class EC(Car):
    def __init__(self, brand, year, model):
        super(). __init__ (brand, year, model)
        self.elbattary = Battary()

tesla = EC('Tesla',2020 ,'S')
print(vars(tesla))


